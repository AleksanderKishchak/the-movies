{"version":3,"sources":["components/GenresList/GenreItem/GenreItem.js","components/GenresList/GenresList.js","containers/GenresListContainer.js"],"names":["GenreItem","_ref","name","id","onClick","react_default","a","createElement","ListItem_default","key","button","component","ListItemText_default","disableTypography","primary","className","defaultProps","shouldUpdate","GenreList","sideEffectsOnClick","_this$props","_this","props","history","location","clearSearchInput","pathname","push","redirectIfNotOnMain","nextProps","_this$props2","this","genres","_this$props3","getMoviesByGenre","List_default","length","map","GenresList_GenreItem_GenreItem","Component","compose","withRouter","connect","state","movies","dispatch","genreId","getMoviesByParams","setSearchText","GenresList"],"mappings":"yTAQA,SAASA,EAATC,GAA0C,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,GAAIC,EAAWH,EAAXG,QAC7B,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,IAAKN,EACLO,QAAM,EACNC,UAAU,KACVP,QAAS,WACPA,EAAQD,KAGVE,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAcO,mBAAiB,EAACC,QAASZ,EAAMa,UAAU,gBAW/Df,EAAUgB,aAAe,CACvBZ,QAAS,cAGIa,kBAAa,kBAAM,GAAnBA,CAA0BjB,cCpBnCkB,6MAOJC,mBAAqB,WAAM,IAAAC,EACuBC,EAAKC,MAA7CC,EADiBH,EACjBG,QAASC,EADQJ,EACRI,SAAUC,EADFL,EACEK,kBAd/B,SAA6BF,EAASC,GACV,MAAtBA,EAASE,UACXH,EAAQI,KAAK,KAcbC,CAAoBL,EAASC,GAC7BC,0FAVoBI,GAAW,IAAAC,EACFC,KAAKT,MAA1BU,EADuBF,EACvBE,OAAQR,EADeM,EACfN,SAEhB,OAAOQ,IAAWH,EAAUG,QAAUR,EAASE,WAAaG,EAAUL,SAASE,0CAUxE,IAAAO,EAC8BF,KAAKT,MAAlCY,EADDD,EACCC,iBAAkBF,EADnBC,EACmBD,OAE1B,OACE3B,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,eACbV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,gBAAf,UACAV,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CAAMF,QAAS2B,KAAKZ,oBACjBa,EAAOI,OAAS,EACbJ,EAAOK,IAAI,SAAApC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,GAAT,OACXE,EAAAC,EAAAC,cAAC+B,EAAD,CAAW7B,IAAKN,EAAIA,GAAIA,EAAID,KAAMA,EAAME,QAAS8B,MAEjD,qBAzBUK,aAwCxBrB,EAAUF,aAAe,CACvBkB,iBAAkB,aAClBT,iBAAkB,aAClBO,OAAQ,IAGKd,QC3CAsB,cACbC,IACAC,YAXsB,SAAAC,GAAK,MAAK,CAChCX,OAAQW,EAAMC,OAAOZ,SAGI,SAAAa,GAAQ,MAAK,CACtCX,iBAAkB,SAAAY,GAAO,OAAID,EAASE,YAAkB,CAAED,cAC1DrB,iBAAkB,kBAAMoB,EAASG,YAAc,SAGlCR,CAMbS","file":"static/js/8.c1b8349f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { shouldUpdate } from 'recompose';\r\n\r\nimport './GenreItem.sass';\r\n\r\nfunction GenreItem({ name, id, onClick }) {\r\n  return (\r\n    <ListItem\r\n      key={id}\r\n      button\r\n      component=\"li\"\r\n      onClick={() => {\r\n        onClick(id);\r\n      }}\r\n    >\r\n      <ListItemText disableTypography primary={name} className=\"genre-name\" />\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nGenreItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nGenreItem.defaultProps = {\r\n  onClick: () => {}\r\n};\r\n\r\nexport default shouldUpdate(() => false)(GenreItem);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport GenreItem from './GenreItem/GenreItem';\r\nimport './GenresList.sass';\r\n\r\nfunction redirectIfNotOnMain(history, location) {\r\n  if (location.pathname !== '/') {\r\n    history.push('/');\r\n  }\r\n}\r\n\r\nclass GenreList extends Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const { genres, location } = this.props;\r\n\r\n    return genres !== nextProps.genres || location.pathname !== nextProps.location.pathname;\r\n  }\r\n\r\n  sideEffectsOnClick = () => {\r\n    const { history, location, clearSearchInput } = this.props;\r\n\r\n    redirectIfNotOnMain(history, location);\r\n    clearSearchInput();\r\n  };\r\n\r\n  render() {\r\n    const { getMoviesByGenre, genres } = this.props;\r\n\r\n    return (\r\n      <div className=\"genres-list\">\r\n        <div className=\"genres-label\">Genres</div>\r\n        <List onClick={this.sideEffectsOnClick}>\r\n          {genres.length > 0\r\n            ? genres.map(({ name, id }) => (\r\n              <GenreItem key={id} id={id} name={name} onClick={getMoviesByGenre} />\r\n            ))\r\n            : 'no genres'}\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGenreList.propTypes = {\r\n  getMoviesByGenre: PropTypes.func,\r\n  clearSearchInput: PropTypes.func,\r\n  genres: PropTypes.array,\r\n  history: PropTypes.object.isRequired,\r\n  location: PropTypes.object.isRequired\r\n};\r\n\r\nGenreList.defaultProps = {\r\n  getMoviesByGenre: () => {},\r\n  clearSearchInput: () => {},\r\n  genres: []\r\n};\r\n\r\nexport default GenreList;\r\n","import { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport compose from 'recompose/compose';\r\n\r\nimport { getMoviesByParams, setSearchText } from '../actions/movies';\r\nimport GenresList from '../components/GenresList/GenresList';\r\n\r\nconst mapStateToProps = state => ({\r\n  genres: state.movies.genres\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getMoviesByGenre: genreId => dispatch(getMoviesByParams({ genreId })),\r\n  clearSearchInput: () => dispatch(setSearchText(''))\r\n});\r\n\r\nexport default compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )\r\n)(GenresList);\r\n"],"sourceRoot":""}